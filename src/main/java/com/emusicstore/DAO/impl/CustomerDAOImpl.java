package com.emusicstore.DAO.impl;

import com.emusicstore.DAO.CustomerDAO;
import com.emusicstore.model.Authorities;
import com.emusicstore.model.Cart;
import com.emusicstore.model.Customer;
import com.emusicstore.model.Users;
import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

/**
 * Created by 泽宏 on 2016/8/25.
 */
@Repository
@Transactional
public class CustomerDAOImpl implements CustomerDAO {

    @Autowired
    SessionFactory sessionFactory;

    public void addCustomer(Customer customer) {
        Session session = sessionFactory.getCurrentSession();

        // the shipping address fields in the model retrieved from the form is not being set
        customer.getShippingAddress().setCustomer(customer);

        // you persist the customer first so that you could get the primary key that is generated by the hibernate
        session.saveOrUpdate(customer);
        session.saveOrUpdate(customer.getShippingAddress());

        Users newUser = new Users();
        newUser.setUsername(customer.getUsername());
        newUser.setPassword(customer.getPassword());
        newUser.setEnabled(true);
        newUser.setCustomerID(customer.getCustomerID());


        Authorities newAuthority = new Authorities();
        newAuthority.setUsername(customer.getUsername());
        newAuthority.setAuthority("ROLE_USER");

        session.saveOrUpdate(newAuthority);
        session.saveOrUpdate(newUser);


        Cart newCart = new Cart();
        newCart.setCustomer(customer);
        customer.setCart(newCart);

        session.saveOrUpdate(customer);
        session.saveOrUpdate(newCart);
    }

    public Customer getCustomerByID(int customerID) {
        Session session = sessionFactory.getCurrentSession();
        return (Customer)session.get(Customer.class,customerID);
    }

    public List<Customer> getAllCustomers() {
        Session session = sessionFactory.getCurrentSession();
        Query query = session.createQuery("from Customer");
        List<Customer> customers = query.list();
        return customers;
    }
}
